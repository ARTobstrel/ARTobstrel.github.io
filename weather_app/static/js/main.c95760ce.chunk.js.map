{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","className","Form","props","onSubmit","weatherMethod","type","name","placeholder","autoComplete","Weather","weatherState","city","src","icon","alt","country","temp","pressure","sunset","error","API_KEY","App","state","undefined","gettingWeather","e","a","preventDefault","target","elements","value","fetch","api_url","json","data","console","log","cod","sys","date","Date","setTime","sunset_date","getHours","slice","getMinutes","getSeconds","setState","weather","main","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sTASeA,EAPF,kBACT,yBAAKC,UAAU,qBACX,wBAAIA,UAAU,yBAAd,uBACA,wBAAIA,UAAU,yBAAd,sCCMOC,EATF,SAAAC,GAAK,OACd,yBAAKF,UAAU,gBACX,0BAAMG,SAAUD,EAAME,cAAeJ,UAAU,2BAC3C,2BAAOK,KAAK,OAAOC,KAAK,OAAOC,YAAY,OAAOC,aAAa,MAAMR,UAAU,wBAC/E,4BAAQA,UAAU,qBAAlB,kBCWGS,EAfC,SAAAP,GAAK,OACjB,yBAAKF,UAAU,gBACVE,EAAMQ,aAAaC,MACpB,yBAAKX,UAAU,uBACX,yBAAKY,IAAG,2CAAsCV,EAAMQ,aAAaG,KAAzD,QAAqEC,IAAI,QACjF,uBAAGd,UAAU,sBAAb,yFAAmDE,EAAMQ,aAAaC,KAAtE,KAA8ET,EAAMQ,aAAaK,SACjG,uBAAGf,UAAU,sBAAb,uEAAgDE,EAAMQ,aAAaM,KAAnE,eACA,uBAAGhB,UAAU,sBAAb,qDAA6CE,EAAMQ,aAAaO,SAAhE,6CACA,uBAAGjB,UAAU,sBAAb,8EAAkDE,EAAMQ,aAAaQ,SAGzE,2BAAIhB,EAAMQ,aAAaS,SCPzBC,G,MAAU,oCAoFDC,E,2MA7EXC,MAAQ,CACJT,UAAMU,EACNP,UAAMO,EACNZ,UAAMY,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACRJ,WAAOI,G,EAIXC,e,sCAAiB,WAAOC,GAAP,yBAAAC,EAAA,wDACbD,EAAEE,mBACIhB,EAAOc,EAAEG,OAAOC,SAASlB,KAAKmB,OAFvB,iCAKaC,MAAM,qDAAD,OAAsDpB,EAAtD,kBAAoES,EAApE,kBALlB,cAKHY,EALG,gBAMUA,EAAQC,OANlB,OAMHC,EANG,OAOTC,QAAQC,IAAIF,GAEI,OAAZA,EAAKG,KACDnB,EAASgB,EAAKI,IAAIpB,QAClBqB,EAAO,IAAIC,MACVC,QAAQvB,GACTwB,EAJe,WAIG,IAAIH,EAAKI,YAAYC,OAAO,GAJ/B,aAIsC,IAAIL,EAAKM,cAAcD,OAAO,GAJpE,aAI2E,IAAIL,EAAKO,cAAcF,OAAO,IAE5H,EAAKG,SAAS,CACVlC,KAAMqB,EAAKc,QAAQ,GAAGnC,KACtBG,KAAMkB,EAAKe,KAAKjC,KAChBL,KAAMuB,EAAK5B,KACXS,QAASmB,EAAKI,IAAIvB,QAClBE,SAAUiB,EAAKe,KAAKhC,SACpBC,OAAQwB,EACRvB,WAAOI,IAEXY,QAAQC,IAAI,EAAKd,MAAMT,OAEvB,EAAKkC,SAAS,CACVlC,UAAMU,EACNP,UAAMO,EACNZ,UAAMY,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACRJ,MAAO,6GAjCN,wBAqCT,EAAK4B,SAAS,CACVlC,UAAMU,EACNP,UAAMO,EACNZ,UAAMY,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACRJ,MAAO,sIA5CF,0C,8HAmDb,OACI,0BAAMnB,UAAU,cACZ,yBAAKA,UAAU,eACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,cACX,kBAAC,EAAD,CAAMI,cAAe8C,KAAK1B,iBAC1B,kBAAC,EAAD,CAASd,aAAcwC,KAAK5B,c,GAvE9B6B,IAAMC,WCCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c95760ce.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Info = () => (\r\n    <div className='application_title'>\r\n        <h1 className='application_title__h1'>Weather application</h1>\r\n        <h3 className='application_title__h3'>Find out the weather in the city</h3>\r\n    </div>\r\n);\r\n\r\nexport default Info","import React from 'react';\r\n\r\nconst Form = props => (\r\n    <div className='weather_form'>\r\n        <form onSubmit={props.weatherMethod} className='weather_form__container'>\r\n            <input type=\"text\" name=\"city\" placeholder=\"City\" autoComplete='off' className='weather_form__input' />\r\n            <button className='weather_form__btn'>Get weather</button>\r\n        </form>\r\n    </div>\r\n);\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Weather = props => (\r\n    <div className='weather_info'>\r\n        {props.weatherState.city &&\r\n        <div className='weather_info__elems'>\r\n            <img src={`https://openweathermap.org/img/w/${props.weatherState.icon}.png`} alt='img' />\r\n            <p className='weather_info__elem'>Местоположение: {props.weatherState.city}, {props.weatherState.country}</p>\r\n            <p className='weather_info__elem'>Температура: {props.weatherState.temp} &deg;С</p>\r\n            <p className='weather_info__elem'>Давление: {props.weatherState.pressure} мм рт.ст. </p>\r\n            <p className='weather_info__elem'>Восход солнца: {props.weatherState.sunset}</p>\r\n        </div>\r\n        }\r\n        <p>{props.weatherState.error}</p>\r\n    </div>\r\n);\r\n\r\nexport default Weather;","import React from 'react';\r\nimport Info from './components/info'\r\nimport Form from './components/form'\r\nimport Weather from './components/weather'\r\nimport './App.css'\r\n\r\nconst API_KEY = \"82b797b6ebc625032318e16f1b42c016\";\r\n\r\n// const API_KEY2 = \"70e1ed322b02acbc57d443dd91065f3e\";\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        icon: undefined,\r\n        temp: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        pressure: undefined,\r\n        sunset: undefined,\r\n        error: undefined\r\n    };\r\n\r\n\r\n    gettingWeather = async (e) => {\r\n        e.preventDefault();\r\n        const city = e.target.elements.city.value;\r\n\r\n        if (city) {\r\n            const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\r\n            const data = await api_url.json();\r\n            console.log(data);\r\n\r\n            if (data.cod == \"200\") {\r\n                let sunset = data.sys.sunset;\r\n                let date = new Date();\r\n                date.setTime(sunset);\r\n                let sunset_date = `${(\"0\"+date.getHours()).slice(-2)}:${(\"0\"+date.getMinutes()).slice(-2)}:${(\"0\"+date.getSeconds()).slice(-2)}`;\r\n\r\n                this.setState({\r\n                    icon: data.weather[0].icon,\r\n                    temp: data.main.temp,\r\n                    city: data.name,\r\n                    country: data.sys.country,\r\n                    pressure: data.main.pressure,\r\n                    sunset: sunset_date,\r\n                    error: undefined\r\n                });\r\n                console.log(this.state.icon);\r\n            } else {\r\n                this.setState({\r\n                    icon: undefined,\r\n                    temp: undefined,\r\n                    city: undefined,\r\n                    country: undefined,\r\n                    pressure: undefined,\r\n                    sunset: undefined,\r\n                    error: \"Неправильный город.\"\r\n                })\r\n            }\r\n        } else {\r\n            this.setState({\r\n                icon: undefined,\r\n                temp: undefined,\r\n                city: undefined,\r\n                country: undefined,\r\n                pressure: undefined,\r\n                sunset: undefined,\r\n                error: \"Введите название города.\"\r\n            })\r\n        }\r\n\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <main className='main_frame'>\r\n                <div className='title_frame'>\r\n                    <Info/>\r\n                </div>\r\n                <div className='info_frame'>\r\n                    <Form weatherMethod={this.gettingWeather}/>\r\n                    <Weather weatherState={this.state}/>\r\n                </div>\r\n\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}